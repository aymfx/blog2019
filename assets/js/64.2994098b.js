(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{575:function(e,t,n){"use strict";n.r(t);var o=n(6),r=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("blockquote",[n("p",[e._v("jQuery源码学习（2）-构造jquery对象（1）")])]),e._v(" "),n("h1",{attrs:{id:"构造函数jquery"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#构造函数jquery"}},[e._v("#")]),e._v(" 构造函数jQuery")]),e._v(" "),n("blockquote",[n("p",[e._v("jQuery(select [,context])")])]),e._v(" "),n("ul",[n("li",[e._v("第一个参数是选择器，用于选择docunment里面的html元素，当传入的参数不是选择器时，会返回一个空的jquery对象")]),e._v(" "),n("li",[e._v("第二个是上下文对象，也就是限制从哪个范围开始查找元素，默认从document")]),e._v(" "),n("li",[e._v("当指定了第二个参数，实际上就是调用了$(selsect).find(xxx)")])]),e._v(" "),n("blockquote",[n("p",[e._v("jQuery(html[,ownerDocument])、jQuery(html,props)")])]),e._v(" "),n("ul",[n("li",[e._v("html 表示如果是html代码，jquery将其转换成一个jquery对象，可以进行插入dom 操作\n"),n("ul",[n("li",[e._v('类似于:$("'),n("div",[e._v("ly")]),e._v("\").appendTo('body'),可以是单标签")])])]),e._v(" "),n("li",[e._v("ownerDocument 表示可以创建新的文档对象，默认当前文档")]),e._v(" "),n("li",[e._v("props 必须是单标签写法")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('$("<div/>", {　　　　\n            "class": "test",\n            　　　　text: "Click me!",\n            　　　　click: function() {　　　　\n                $(this).toggleClass("bar");　　　\n            }　　\n        }).appendTo("body");\n')])])]),n("blockquote",[n("p",[e._v("jQuery(element) jQuery(elementArray)")])]),e._v(" "),n("ul",[n("li",[e._v("该方法是将dom元素封装成jquery元素然年调用jquery方法")]),e._v(" "),n("li",[e._v("多用于事件的监听")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$('div').click(function(){\n    $(this).show();\n})\n")])])]),n("blockquote",[n("p",[e._v("jQuery(object)")]),e._v(" "),n("ul",[n("li",[e._v("对于普通的js对象也可以包装成jquery对象的")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var names = {\n            first: 'liu',\n            last: 'yang'\n        }\n        var $names = $(names);\n        console.log($names);\n        $names.on('binds', function() {\n            console.log('我叫', $names[0].first + $names[0].last);\n        })\n    $names.trigger('binds'); //自动触发\n")])])]),n("blockquote",[n("p",[e._v("jQuery(callback)")])]),e._v(" "),n("ul",[n("li",[e._v("如果传入一个函数，在document绑定一个ready事件监听函数，当dom加载时执行")]),e._v(" "),n("li",[e._v("ready比load早执行，不是原生函数,它由DOMContentLoaded事件onreadystatechange事件以及函数doScrollCheck()的统称")])]),e._v(" "),n("blockquote",[n("p",[e._v("jQuery(jQuery object)")])]),e._v(" "),n("ul",[n("li",[e._v("如归传入的是jquery对象，会创建一个一样的副本，并且返回，他们引用的同一个地址")])]),e._v(" "),n("blockquote",[n("p",[e._v("jQuery()")])]),e._v(" "),n("ul",[n("li",[e._v("不传参则返回一个空的jquery对象")])]),e._v(" "),n("h2",{attrs:{id:"jquery-fn-init-selector-context-rootjquery"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jquery-fn-init-selector-context-rootjquery"}},[e._v("#")]),e._v(" jQuery.fn.init(selector,context,rootjQuery)")]),e._v(" "),n("blockquote",[n("p",[e._v("12个分支")])]),e._v(" "),n("ul",[n("li",[e._v("也就是有12种处理方式的写法，具体参考书吧")]),e._v(" "),n("li",[e._v("以下也有讲解")])]),e._v(" "),n("blockquote",[n("p",[e._v("selector:接收的是dom对象")])]),e._v(" "),n("blockquote",[n("p",[e._v("context : 上下文对象")])]),e._v(" "),n("blockquote",[n("p",[e._v("rootjQuery")])]),e._v(" "),n("ul",[n("li",[e._v("用于以下情况")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//id查找失败\nif (elem.id !== match[2]) {\n    return rootjQuery.find(selector);\n    }\n\n//selector是选择器且没有context\n\nif (!context || context.jquery) {\n        return (context || rootjQuery).find(selector);\n    }\n\n//selector是函数\n\nif (jQuery.isFunction(selector)) {\n        return rootjQuery.ready(selector);\n    }\n\n//怎么定义rootjQuery？\n rootjQuery = jQuery(document);\n\n//如果判断选择器是false，返回的是空的$();\n    if (!selector) {\n        return this;\n    }\n    \n//如果字符串是body，则获取document.body\n    if (selector === "body" && !context && document.body) {\n        console.log("是我呀");\n        this.context = document;\n        this[0] = document.body;\n        this.selector = selector;\n        this.length = 1;\n        return this;\n    }\n    \n\n\n//用于匹配html代码以及id,第一个是selector 第二个是html或者undefind \n    quickExpr = /^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)/,\n\n\n//  匹配单标记\n\n rsingleTag = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>)?$/,\n\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);