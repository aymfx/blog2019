(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{630:function(e,n,t){"use strict";t.r(n);var r=t(6),a=Object(r.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("blockquote",[t("p",[e._v("Lifting State Up")])]),e._v(" "),t("h1",{attrs:{id:"案例一"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#案例一"}},[e._v("#")]),e._v(" 案例一")]),e._v(" "),t("blockquote",[t("p",[e._v("通过输入温度改变条件")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function BoilingVerdict(props) {\n    if(props.celsius>=100) {\n        return <p>水开了</p>\n    }\n    return <p>水没开</p>\n}\n\nclass Calculator extends Component {\n    constructor (props) {\n        super(props)\n        this.handleChange = this.handleChange.bind(this);\n        this.state  = {temperature:''}\n    }\n\n    handleChange(e) {\n        this.setState({temperature:e.target.value})\n    }\n\n    render(){\n        const temperature = this.state.temperature;\n\n        return (<div>\n            <fieldest>\n                <legend>\n                    输入温度吧\n                </legend>\n                <input type=\"text\"\n                       value={temperature}\n                       onChange={this.handleChange}\n                />\n                <BoilingVerdict\n                    celsius={parseFloat(temperature)}\n                />\n            </fieldest>\n        </div>)\n\n    }\n}\n")])])]),t("blockquote",[t("p",[e._v("通过输入温度改变不同的的状态,共享状态是通过将其移动到需要它的组件的最接近的共同祖先来完成的，通过 event up 改变父组件状态值")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const scaleNames = {\n    c: 'Celsius',\n    f: 'Fahrenheit'\n};\n\nfunction toCelsius(fahrenheit) {\n    return (fahrenheit - 32) * 5 / 9;\n}\n\nfunction toFahrenheit(celsius) {\n    return (celsius * 9 / 5) + 32;\n}\n\nfunction tryConvert(temperature, convert) {\n    const input = parseFloat(temperature);\n    if (Number.isNaN(input)) {\n        return '';\n    }\n    const output = convert(input);\n    const rounded = Math.round(output * 1000) / 1000;\n    return rounded.toString();\n}\n\nfunction BoilingVerdict(props) {\n    if (props.celsius >= 100) {\n        return <p>The water would boil.</p>;\n    }\n    return <p>The water would not boil.</p>;\n}\n\nclass TemperatureInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n        this.props.onTemperatureChange(e.target.value);\n    }\n\n    render() {\n        const temperature = this.props.temperature;\n        const scale = this.props.scale;\n        return (\n            <fieldset>\n                <legend>Enter temperature in {scaleNames[scale]}:</legend>\n                <input value={temperature}\n                       onChange={this.handleChange} />\n            </fieldset>\n        );\n    }\n}\n\nclass Calculator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n        this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n        this.state = {temperature: '', scale: 'c'};\n    }\n\n    handleCelsiusChange(temperature) {\n        this.setState({scale: 'c', temperature});\n    }\n\n    handleFahrenheitChange(temperature) {\n        this.setState({scale: 'f', temperature});\n    }\n\n    render() {\n        const scale = this.state.scale;\n        const temperature = this.state.temperature;\n        const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n        const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n\n        return (\n            <div>\n                <TemperatureInput\n                    scale=\"c\"\n                    temperature={celsius}\n                    onTemperatureChange={this.handleCelsiusChange} />\n                <TemperatureInput\n                    scale=\"f\"\n                    temperature={fahrenheit}\n                    onTemperatureChange={this.handleFahrenheitChange} />\n                <BoilingVerdict\n                    celsius={parseFloat(celsius)} />\n            </div>\n        );\n    }\n}\n")])])]),t("blockquote",[t("p",[e._v("在任何一个 react 对象中，任何数据都应该是单一来源。")])]),e._v(" "),t("blockquote",[t("p",[e._v("这个状态需要第一时间被添加到它需要的组件上，如果其他组件也需要它，我们可以把他的状态提升到它最近的组件上，而不是试图在不同组件同步,这就是自相而下的数据流。")])])])}),[],!1,null,null,null);n.default=a.exports}}]);