(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{617:function(n,e,t){"use strict";t.r(e);var o=t(6),r=Object(o.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[n._v("#")])]),n._v(" "),t("blockquote",[t("p",[n._v("对于学习 node 的人来说首先 node 安装是必备的，这里就跳过了")])]),n._v(" "),t("blockquote",[t("p",[n._v("http://expressjs.com/ 它的官网")])]),n._v(" "),t("blockquote",[t("p",[n._v("安装 express npm i express")])]),n._v(" "),t("blockquote",[t("p",[n._v("新建一个 app.js 文件，写以下的代码")])]),n._v(" "),t("blockquote",[t("p",[n._v("建一个简单的 express")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\n//引入 `express` 模块\nvar express = require('express');\n\n// 调用 express 实例，它是一个函数，不带参数调用时，会返回一个 express 实例，将这个变量赋予 app 变量\n\nvar app = express();\n\n//调用get方法，当我们访问/这个根目录时，我们会执行回调，send用于向网页输出字符串\napp.get('/', function(req, res) {\n    res.send('Hello,world');\n})\n// 定义好我们 app 的行为之后，让它监听本地的 3000 端口。这里的第二个函数是个回调函数，会在 listen 动作成功后执行，我们这里执行了一个命令行输出操作，告诉我们监听动作已完成。\napp.listen(3000, function() {\n    console.log(\"app is listen at port 3000\");\n})\n")])])]),t("blockquote",[t("p",[n._v("参考")])]),n._v(" "),t("blockquote",[t("p",[n._v("// app 本身有很多方法，其中包括最常用的 get、post、put/patch、delete，在这里我们调用其中的 get 方法，为我们的 "),t("code",[n._v("/")]),n._v(" 路径指定一个 handler 函数。")])]),n._v(" "),t("blockquote",[t("p",[n._v("// 这个 handler 函数会接收 req 和 res 两个对象，他们分别是请求的 request 和 response。")])]),n._v(" "),t("blockquote",[t("p",[n._v("// request 中包含了浏览器传来的各种信息，比如 query 啊，body 啊，headers 啊之类的，都可以通过 req 对象访问到。")])]),n._v(" "),t("blockquote",[t("p",[n._v("// res 对象，我们一般不从里面取信息，而是通过它来定制我们向浏览器输出的信息，比如 header 信息，比如想要向浏览器输出的内容。这里我们调用了它的 #send 方法，向浏览器输出一个字符串。")])]),n._v(" "),t("blockquote",[t("p",[n._v("执行 node app.js")])]),n._v(" "),t("blockquote",[t("p",[n._v("然后在浏览器地址栏输出> http://localhost:3000/")])]),n._v(" "),t("h1",{attrs:{id:"学习使用外部模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#学习使用外部模块"}},[n._v("#")]),n._v(" 学习使用外部模块")]),n._v(" "),t("blockquote",[t("p",[n._v("npm init 初始化")])]),n._v(" "),t("blockquote",[t("p",[n._v("cnpm i express utility -S 安装两个依赖块")])]),n._v(" "),t("blockquote",[t("p",[n._v("https://github.com/node-modules/utility utility 是一个工具类，在这个地方用于加密哦")])]),n._v(" "),t("blockquote",[t("p",[n._v("新建一个 app.js 文件，写以下的代码")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var express = require('express');\nvar utility = require('utility');\n\nvar app = express();\n\napp.get('/', function(req, res) {\n    //query用来获取地址栏后面的参数\n    var message = req.query.message;\n    //使用工具函数进行加密处理\n    var md5Value = utility.md5(message);\n    res.send(md5Value);\n\n});\n\napp.listen(3000, function(req, res) {\n    console.log('app is running at port 3000')\n})\n")])])]),t("blockquote",[t("p",[n._v("执行 node app.js")])]),n._v(" "),t("blockquote",[t("p",[n._v("然后在浏览器地址栏输出> http://localhost:3000/?message='liuyang'")])]),n._v(" "),t("h1",{attrs:{id:"使用-superagent-与-cheerio-完成简单爬虫"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-superagent-与-cheerio-完成简单爬虫"}},[n._v("#")]),n._v(" 使用 superagent 与 cheerio 完成简单爬虫")]),n._v(" "),t("blockquote",[t("p",[n._v("superagent superagent(http://visionmedia.github.io/superagent/ ) 是个 http 方面的库，可以发起 get 或 post 请求。")])]),n._v(" "),t("blockquote",[t("p",[n._v("cheerio (https://github.com/cheeriojs/cheerio ) 大家可以理解成一个 Node.js 版的 jquery，用来从网页中以 css selector 取数据，使用方式跟 jquery 一样一样的。")])]),n._v(" "),t("blockquote",[t("p",[n._v("新建一个 app.js 文件，写以下的代码")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var express = require('express')\nvar superagent = require('superagent');\nvar cheerio = require('cheerio');\n\nvar app = express();\n\napp.get('/', function(req, res, next) {\n    //用superagent去抓取页面内容\n    superagent.get('http://www.qdfuns.com/').end(function(err, sres) {\n        if (err) {\n            return next(err)\n        }\n        //加载取到的页面，然后创建一个类似jquery的实例\n        var $ = cheerio.load(sres.text);\n\n        var items = [];\n        $(\".media-body\").each(function(idx, ele) {\n            var $ele = $(ele);\n            items.push({\n                title: $ele.text()\n            })\n        })\n\n        res.send(items);\n\n    })\n\n\n\n})\n\napp.listen(3000, function(req, res) {\n    console.log('app is running at port 3000')\n})\n")])])]),t("blockquote",[t("p",[n._v("利用这两个模块，我们能抓取我们所需要的数据")])]),n._v(" "),t("h1",{attrs:{id:"使用-eventproxy-控制并发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-eventproxy-控制并发"}},[n._v("#")]),n._v(" 使用 eventproxy 控制并发")]),n._v(" "),t("blockquote",[t("p",[n._v("这一小节内容，利用 eventproxy，实现并发抓取 1+40,1 就是抓取 40 个主题，40 是抓取每个主题链接下面的评论，也就是说我们要发起 1+40 个请求，后四十个请求一起发起")])]),n._v(" "),t("blockquote",[t("p",[n._v("eventproxy https://github.com/JacksonTian/eventproxy 并发执行异步回调，移除被广为诟病的深度 callback 嵌套问题，将串行等待变成并行等待，提升多异步协作场景下的执行效率")])]),n._v(" "),t("blockquote",[t("p",[n._v("eventproxy 提供了不少其他场景所需的 API，但最最常用的用法就是以上的这种，即：")])]),n._v(" "),t("blockquote",[t("p",[n._v("先 var ep = new eventproxy(); 得到一个 eventproxy 实例。")])]),n._v(" "),t("blockquote",[t("p",[n._v("告诉它你要监听哪些事件，并给它一个回调函数。ep.all('event1', 'event2', function (result1, result2) {})。")])]),n._v(" "),t("blockquote",[t("p",[n._v("在适当的时候 ep.emit('event_name', eventData)。")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var express = require('express')\nvar superagent = require('superagent');\nvar cheerio = require('cheerio');\nvar eventproxy = require('eventproxy');\nvar url = require('url');\nvar cnodeUrl = 'https://cnodejs.org/'\nvar app = express();\nvar topicUrls = [];\nvar topicsS = [];\napp.get('/', function(req, res, next) {\n\n\n    superagent.get(cnodeUrl).end(function(err, sres) {\n        if (err) {\n            return next(err)\n        }\n        var $ = cheerio.load(sres.text);\n\n        $(\"#topic_list .topic_title\").each(function(idx, ele) {\n            var $ele = $(ele);\n            //url.resolve，可以补全前面的域名，进行拼接操作\n            var href = url.resolve(cnodeUrl, $ele.attr('href'));\n            topicUrls.push(href);\n        })\n\n\n        topicUrls.forEach(function(topiculr) {\n            superagent.get(topiculr).end(function(err, res) {\n                console.log(\"fetch\" + topiculr + 'successful');\n                ep.emit('topic_html', [topiculr, res.text])\n            })\n        })\n\n        //创建一个eventproxy实例\n        var ep = new eventproxy();\n        //这个表示重复监听topic_html事件40次后执行回调函数\n        ep.after('topic_html', topicUrls.length, function(topics) {\n            console.log(1212);\n            //它将emit过来东西全部保存在数组里，然后用map将它遍历\n            topicsS = topics.map(function(topicPair) {\n                var topicUrl = topicPair[0];\n                var topicHtml = topicPair[1];\n                var $ = cheerio.load(topicHtml);\n                return ({\n                    title: $('.topic_full_title').text().trim(),\n                    href: topicUrl,\n                    commit1: $('.reply_content').eq(0).text().trim()\n                })\n            })\n\n            res.send(topicsS);\n        })\n\n\n\n    })\n})\n\napp.listen(3000, function(req, res) {\n    console.log('app is running at port 3000')\n})\n")])])]),t("h1",{attrs:{id:"使用-async-控制并发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-async-控制并发"}},[n._v("#")]),n._v(" 使用 async 控制并发")]),n._v(" "),t("blockquote",[t("p",[n._v("async https://github.com/caolan/async 用于延迟并发，减少一起并发导致网站出问题")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var async = require('async');\n\nvar concurrencyCount = 0;\n\n//模拟假的数据请求，返回一个callback值\n\nvar fetchUrl = function(url, callback) {\n    var delay = parseInt((Math.random() * 10000000) % 2000, 10);\n    concurrencyCount++;\n    console.log('现在的并发数是', concurrencyCount, '，正在抓取的是', url, '，耗时' + delay + '毫秒');\n    setTimeout(function() {\n        concurrencyCount--;\n        //用这个做拼接\n        callback(null, url + 'html content')\n    }, delay)\n};\n\nvar urls = [];\n\nfor (var i = 0; i < 30; i++) {\n    urls.push('http://datasource_' + i);\n}\n//限制并发的次数\nasync.mapLimit(urls, 5, function(url, callback) {\n    fetchUrl(url, callback);\n}, function(err, result) {\n    console.log('final:');\n    //最终结果汇总\n    console.log(result);\n})\n")])])]),t("h1",{attrs:{id:"测试用例-mocha-should-istanbul"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#测试用例-mocha-should-istanbul"}},[n._v("#")]),n._v(" 测试用例：mocha，should，istanbul")]),n._v(" "),t("blockquote",[t("p",[n._v("学习使用测试框架 mocha : http://mochajs.org/")])]),n._v(" "),t("blockquote",[t("p",[n._v("学习使用断言库 should : https://github.com/tj/should.js")])]),n._v(" "),t("blockquote",[t("p",[n._v("学习使用测试率覆盖工具 istanbul : https://github.com/gotwarlost/istanbul")])]),n._v(" "),t("blockquote",[t("p",[n._v("简单 Makefile 的编写 : http://blog.csdn.net/haoel/article/details/2886")])]),n._v(" "),t("blockquote",[t("p",[n._v("学习使用断言库 expect :https://github.com/LearnBoost/expect.js/")])]),n._v(" "),t("blockquote",[t("p",[n._v("先建一个文件 main.js")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var fibonacci = function(n) {\n    if (n === 0) {\n        return 0;\n    }\n\n    if (n === 1) {\n        return 1;\n    }\n\n    return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\nif (require.main === module) {\n    // 如果是直接执行 main.js，则进入此处\n    // 如果 main.js 被其他文件 require，则此处不会执行。\n    var n = Number(process.argv[2]);\n    console.log('fibonacci(' + n + ') is', fibonacci(n));\n}\n\nexports.fibonacci = fibonacci;\n")])])]),t("blockquote",[t("p",[n._v("在同级目录下建一个文件夹命名必须为 test 在它的子目录建一个文件 main-test.js")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var main = require('../main');\nvar should = require('should');\n\ndescribe('test/main.test.js', function() {\n    it('should equal 0 when n === 0', function() {\n        main.fibonacci(0).should.equal(0);\n    });\n\n    it('should equal 1 when n === 1', function() {\n        main.fibonacci(1).should.equal(1);\n    });\n\n    it('should equal 55 when n === 10', function() {\n        main.fibonacci(10).should.equal(55);\n    });\n\n    it('should throw when n > 10', function() {\n        (function() {\n            main.fibonacci(11);\n        }).should.throw('n should <= 10');\n    });\n\n    it('should throw when n < 0', function() {\n        (function() {\n            main.fibonacci(-1);\n        }).should.throw('n should >= 0');\n    });\n\n    it('should throw when n isnt Number', function() {\n        (function() {\n            main.fibonacci('呵呵');\n        }).should.throw('n should be a Number');\n    });\n});\n")])])]),t("blockquote",[t("p",[n._v("由于 node 的计算能力以及边界值得原因后三个可能过不了，需要修补下代码")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var fibonacci = function (n) {\n  if (typeof n !== 'number') {\n    throw new Error('n should be a Number');\n  }\n  if (n < 0) {\n    throw new Error('n should >= 0');\n  }\n  if (n > 10) {\n    throw new Error('n should <= 10');\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n")])])]),t("blockquote",[t("p",[n._v("测试用例的覆盖率")])]),n._v(" "),t("blockquote",[t("p",[n._v("安装 npm i istanbul -g")])]),n._v(" "),t("blockquote",[t("p",[n._v("执行 $ istanbul cover _mocha （有大问题，window 有坑）")])]),n._v(" "),t("h1",{attrs:{id:"浏览器端测试-mocha-chai-phantomjs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器端测试-mocha-chai-phantomjs"}},[n._v("#")]),n._v(" 浏览器端测试：mocha，chai，phantomjs")]),n._v(" "),t("blockquote",[t("p",[n._v("学习使用测试框架 mocha 进行前端测试 : http://mochajs.org/")])]),n._v(" "),t("blockquote",[t("p",[n._v("了解全栈的断言库 chai: http://chaijs.com/")])]),n._v(" "),t("blockquote",[t("p",[n._v("了解 headless 浏览器 phantomjs: http://phantomjs.org/")])]),n._v(" "),t("blockquote",[t("p",[n._v("第一步需要安装 mocha cnpm i mocha -g")])]),n._v(" "),t("blockquote",[t("p",[n._v("初始化 mocha mocha init .")])]),n._v(" "),t("blockquote",[t("p",[n._v("会生成几个初始化的文件")])]),n._v(" "),t("blockquote",[t("p",[n._v("引入 chai,在 index.html")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\x3c!--引入 断言库 chaijs --\x3e\n    <script src='https://cdn.rawgit.com/chaijs/chai/master/chai.js'><\/script>\n\n\x3c!--需要测试的代码--\x3e\n    <script>\n        var fibonacci = function(n) {\n            if (n === 0) {\n                return 0;\n            }\n            if (n === 1) {\n                return 1;\n            }\n            return fibonacci(n - 1) + fibonacci(n - 2);\n        };\n")])])]),t("blockquote",[t("p",[n._v("在 test.js 中写测试用例")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var should = chai.should();\n\ndescribe('我只是一个测试', function() {\n    it(\"测试是否等于0\", function() {\n        window.fibonacci(0).should.equal(0);\n    })\n})\n")])])]),t("blockquote",[t("p",[n._v("运行 index 看结果")])]),n._v(" "),t("blockquote",[t("p",[n._v("测试反馈")])]),n._v(" "),t("blockquote",[t("p",[n._v("初始化 npm init")])]),n._v(" "),t("blockquote",[t("p",[n._v("安装依赖 cnpm i mocha-phantomjs --save-dev")])]),n._v(" "),t("blockquote",[t("p",[n._v("在 package.json 加入这么一句话")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('"scripts": {\n  "test": "mocha-phantomjs index.html --ssl-protocol=any --ignore-ssl-errors=true"\n},\n')])])]),t("blockquote",[t("p",[n._v("npm test")])])])}),[],!1,null,null,null);e.default=r.exports}}]);