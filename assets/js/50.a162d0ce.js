(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{563:function(a,t,e){"use strict";e.r(t);var n=e(6),s=Object(n.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("p",[e("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/10843623-82935528251fe29d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"timg.jpg"}})]),a._v(" "),e("h3",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[a._v("#")]),a._v(" 前言")]),a._v(" "),e("blockquote",[e("p",[a._v("花点时间重新复习一遍es6的语法")])]),a._v(" "),e("blockquote",[e("p",[a._v("我的博客地址 ：http://www.aymfx.cn/")])]),a._v(" "),e("h3",{attrs:{id:"var-let-const-三者的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#var-let-const-三者的区别"}},[a._v("#")]),a._v(" var，let, const 三者的区别")]),a._v(" "),e("blockquote",[e("p",[a._v("var 声明的变量会有变量提升的过程，将被提升到作用域的顶部，或者函数的顶部")])]),a._v(" "),e("blockquote",[e("p",[a._v("let 声明的变量，只能在声明的块作用域中访问和使用，存在于函数内部以及花括号之间的区域")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("{\n    let a = 3;\n}\n\nconsole.log(a); //a is not defined\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function(){\n    let a = 3;\n}\nconsole.log(a); //a is not defined\n")])])]),e("h3",{attrs:{id:"const-是用来声明静态变量的-一但设置了值之后就不可改变"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#const-是用来声明静态变量的-一但设置了值之后就不可改变"}},[a._v("#")]),a._v(" const 是用来声明静态变量的，一但设置了值之后就不可改变")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const a = 20;\na= 60;\n//Assignment to constant variable.\n")])])]),e("h3",{attrs:{id:"const在对象中是绑定了这个对象-但是对象的内容是可以改变的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#const在对象中是绑定了这个对象-但是对象的内容是可以改变的"}},[a._v("#")]),a._v(" const在对象中是绑定了这个对象，但是对象的内容是可以改变的")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const a = {length:2}\n\na.length = 6;\n")])])]),e("h3",{attrs:{id:"var-可以重复声明变量-let和const声明的变量不能重新声明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#var-可以重复声明变量-let和const声明的变量不能重新声明"}},[a._v("#")]),a._v(" var 可以重复声明变量 let和const声明的变量不能重新声明")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var count = 30;\nlet count = 40;\nVM49:2 Uncaught SyntaxError: Identifier 'count' has already been declared\n\n")])])]),e("h3",{attrs:{id:"临时死区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#临时死区"}},[a._v("#")]),a._v(" 临时死区")]),a._v(" "),e("p",[a._v("let和const不会出现变量提升的情况，未定义的值将直接报错,也就产生所谓的临时死区")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('if(true){\n    console.log(typeof value);  //alue is not defined\n    let value = "blue"\n}\n')])])]),e("blockquote",[e("p",[a._v("注意这种情况")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('console.log(typeof value);  //alue is not defined\nif(true){\n    \n    let value = "blue"\n}\n')])])]),e("h3",{attrs:{id:"循环中的块级作用域绑定"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#循环中的块级作用域绑定"}},[a._v("#")]),a._v(" 循环中的块级作用域绑定")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var fun = [];\nfor(var i = 0;i<10;i++){\n    fun.push(function(){console.log(i)})\n}\n\nfun.forEach(function(f){f()})  //0VM118:3 10\n\n")])])]),e("blockquote",[e("p",[a._v("上面代码输出了10个10,不对的，我们期待是0-9，改成这样的话")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let fun = [];\nfor(let i = 0;i<10;i++){\n    fun.push(function(){console.log(i)})\n}\n\nfun.forEach(function(f){f()})  //0VM118:3 10\n\n")])])]),e("blockquote",[e("p",[a._v("以上写法对于 for-in 以及for-of 同样适用")])]),a._v(" "),e("blockquote",[e("p",[a._v("循环中使用const声明")])]),a._v(" "),e("blockquote",[e("p",[a._v("这样会报错")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var f = [];\nfor(const i =0;i<10;i++){\n    f.push(function(){\n        console.log(i);\n    })\n} //Assignment to constant variable\n")])])]),e("blockquote",[e("p",[a._v("但是 for-in 和for-of，由于是绑定元素不会报错，上面在第二次循环修改了变量的值导致报错")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var f = [];\nobj = {\n    a:1,\n    b:2,\n    c:3\n}\n\nfor(const key in obj){\n    f.push(function(){\n        console.log(key);\n    })\n}\nf.forEach(function(f){f()}) \n//a\n//VM184:10 b\n//VM184:10 c\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("f= ['1',2,4,5]\n\nfor(const key of f){\n    console.log(key);\n}\n\n//VM204:4 1\n//VM204:4 2\n//VM204:4 4\n//VM204:4 5\n")])])]),e("h3",{attrs:{id:"全局作用域的绑定"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全局作用域的绑定"}},[a._v("#")]),a._v(" 全局作用域的绑定")]),a._v(" "),e("blockquote",[e("p",[a._v("var 在全局中相当于添加了window对象的属性，但是有可能误操作覆盖了已有的全局属性")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('console.log(window.RegExp); //ƒ RegExp() { [native code] }\nvar RegExp = "正则表达式"\nconsole.log(window.RegExp); //正则表达式\n')])])]),e("blockquote",[e("p",[a._v("相对于var来说let和const不会创建一个新的绑定,他会屏蔽window的属性，而不是添加或者覆盖window的属性")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('console.log(window.RegExp); //ƒ RegExp() { [native code] }\nlet RegExp = "正则表达式"\nconsole.log(window.RegExp); //ƒ RegExp() { [native code] }\nconsole.log(RegExp) //正则表达式\n')])])])])}),[],!1,null,null,null);t.default=s.exports}}]);