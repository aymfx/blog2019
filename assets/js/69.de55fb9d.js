(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{583:function(t,a,l){"use strict";l.r(a);var s=l(6),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,l=t._self._c||a;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("blockquote",[l("p",[t._v("查找方法")])]),t._v(" "),l("h2",{attrs:{id:"字符方法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#字符方法"}},[t._v("#")]),t._v(" 字符方法")]),t._v(" "),l("ul",[l("li",[t._v("charAt()\n"),l("ul",[l("li",[t._v("功能:返回字符串第n个字符")]),t._v(" "),l("li",[t._v("参数:超出范围-返回空字符串")]),t._v(" "),l("li",[t._v("返回值:string中第n个字符的实际值")])])])]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v('\t\t\tvar str="assddsddsad";\n\t\t\tconsole.log(str.charAt(3));//d\n\t\t\tconsole.log(str.charAt(20));//什么没有 空\n')])])]),l("ul",[l("li",[t._v("charCodeAt()\n"),l("ul",[l("li",[t._v("功能:返回字符串中第n个字符的代码")]),t._v(" "),l("li",[t._v("参数：num ----超出范围返回NaN")]),t._v(" "),l("li",[t._v("返回值:\n"),l("ul",[l("li",[t._v("内容：string中第n个字符的Unicode编码")]),t._v(" "),l("li",[t._v("范围:0~65535之间的16位整数")])])])])])]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v('\t\t\t\tvar str="assddsddsad";\n\t\t\t\tconsole.log(str.charCodeAt(3));//100\n\t\t\t\tconsole.log(str.charCodeAt(20));//NaN\n')])])]),l("ul",[l("li",[t._v("fromCharCode()\n"),l("ul",[l("li",[t._v("功能：根据字符串编码创建字符串")]),t._v(" "),l("li",[t._v("参数:0个或多个整数 代表字符Unicode编码")]),t._v(" "),l("li",[t._v("返回值:由指定编码字符组成的新字符串")]),t._v(" "),l("li",[t._v("特性:静态方法,实为构造函数String()的属性")])])])]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("\t\t\tconsole.log(String.fromCharCode(520));//Ȉ\n\t\t\tconsole.log(String.fromCharCode(880));//Ͱ\n")])])]),l("h2",{attrs:{id:"位置方法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#位置方法"}},[t._v("#")]),t._v(" 位置方法")]),t._v(" "),l("ul",[l("li",[t._v("indexOf():从前向后检索字符串,看其是否含有指定子串")]),t._v(" "),l("li",[t._v("lastIndexOf()：从后向前检索字符串,看其是否含有指定子串")]),t._v(" "),l("li",[t._v("共性\n"),l("ul",[l("li",[t._v("功能:根据指定字符串查找下标位置")]),t._v(" "),l("li",[t._v("参数\n"),l("ul",[l("li",[t._v("必选：将要查询的自字符串")]),t._v(" "),l("li",[t._v("可选:开始查找的位置下标\n"),l("ul",[l("li",[t._v("值为负数:视作0")]),t._v(" "),l("li",[t._v("省略:从默认位置开始")]),t._v(" "),l("li",[t._v("超出0-length-1,返回-1")])])])])]),t._v(" "),l("li",[t._v("返回值\n"),l("ul",[l("li",[t._v("找到:子串首次出现的下标")]),t._v(" "),l("li",[t._v("未找到:返回-1")])])])])])]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v('\t\t\t\t\tvar str="asdalove";\n\t\t\t\t\tconsole.log(str.indexOf("2"))//-1\n\t\t\t\t\tconsole.log(str.indexOf("2",8))//-1\n\t\t\t\t\tconsole.log(str.indexOf("a",2))//3\n\t\t\t\t\tconsole.log(str.indexOf("a",0))//0\n\t\t\t\t\tconsole.log(str.lastIndexOf("a",0))//0\n\t\t\t\t\tconsole.log(str.lastIndexOf("a",2))//0\n\t\t\t\t\tconsole.log(str.lastIndexOf("a",-100))//0\n\t\t\t\t\tconsole.log(str.lastIndexOf("a",20))//3 \n\t\t\t\t\tconsole.log(str.lastIndexOf("a",2))//0\n')])])]),l("h2",{attrs:{id:"匹配方法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#匹配方法"}},[t._v("#")]),t._v(" 匹配方法")]),t._v(" "),l("ul",[l("li",[t._v("match()\n"),l("ul",[l("li",[t._v("功能:找到一个或多个正则表达式的匹配")]),t._v(" "),l("li",[t._v("参数\n"),l("ul",[l("li",[t._v("要进行模式匹配的正则表达式")]),t._v(" "),l("li",[t._v("非正则表达式-将其传递给RegExp()构造函数，并转换为正则表达式的对象")])])]),t._v(" "),l("li",[t._v("返回值：存放匹配结果的数组\n"),l("ul",[l("li",[t._v("有全局标记g\n"),l("ul",[l("li",[t._v("执行全局检索\n"),l("ul",[l("li",[t._v("找到：返回数组\n"),l("ul",[l("li",[t._v("内容:所有匹配的子串")]),t._v(" "),l("li",[t._v("缺陷:\n"),l("ul",[l("li",[t._v("没有派生属性")]),t._v(" "),l("li",[t._v("不提供与子表达式匹配的文本信息")]),t._v(" "),l("li",[t._v("不声明每个匹配子串的位置")])])]),t._v(" "),l("li",[t._v("弥补:使用RegExp.exec()方法")])])]),t._v(" "),l("li",[t._v("没找到:返回null")])])])])]),t._v(" "),l("li",[t._v("无全局标记g\n"),l("ul",[l("li",[t._v("执行一次匹配\n"),l("ul",[l("li",[t._v("找到：返回数组\n"),l("ul",[l("li",[t._v("内容\n"),l("ul",[l("li",[t._v("第0个元素：匹配文本")]),t._v(" "),l("li",[t._v("其他元素：与正则表达式匹配的文本")])])]),t._v(" "),l("li",[t._v("属性\n"),l("ul",[l("li",[t._v("input:调用该方法的字符串对象")]),t._v(" "),l("li",[t._v("index:匹配为本的起始字符在字符串的位置")]),t._v(" "),l("li",[t._v("lastIndex:匹配为本的末尾字符在字符串的位置")])])])])]),t._v(" "),l("li",[t._v("没找到:返回null")])])])])])])])])])]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v('\t\t\t\t\t\tvar str = "The rain in SPAIN stays mainly in the plain";\n\t\t\t\t\t\tconsole.log(str.match(/ain/g));//["ain", "ain", "ain"]\n\t\t\t\t\t\tconsole.log(str.match(/ain/gi));//["ain", "AIN", "ain", "AIN"]   i可以保证不区分大小写\n\t\t\t\t\t\tconsole.log(str.match(/ain/));//["ain", index: 5, input: "The rain in SPAIN stays mainly in the plain"] \n')])])]),l("ul",[l("li",[t._v("search()\n"),l("ul",[l("li",[t._v("功能:检索字符串中正则表达式匹配的子串")]),t._v(" "),l("li",[t._v("参数:与match()相同")]),t._v(" "),l("li",[t._v("返回值\n"),l("ul",[l("li",[t._v("找到:字符串中第一个与正则表达式相匹配的子串的起始位置")]),t._v(" "),l("li",[t._v("未找到:返回-1")])])]),t._v(" "),l("li",[t._v("特性:忽略全局标记g和lastIndex()属性")])])])]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v('\t\t\tvar str = "The rain in SPAIN stays mainly in the plain";\n\t\t\tconsole.log(str.search("in"));//6\n')])])]),l("ul",[l("li",[t._v("replace()\n"),l("ul",[l("li",[t._v("功能:替换一个正则表达式匹配的子串")]),t._v(" "),l("li",[t._v("参数\n"),l("ul",[l("li",[t._v("参数1：需要进行替换正则表达式对象或字符串")]),t._v(" "),l("li",[t._v("参数2:替换文本或替换函数")])])]),t._v(" "),l("li",[t._v("特性\n"),l("ul",[l("li",[t._v("如果参数1仅为字符串则只进行一次匹配替换，若代替所有的子串则必须制定全局标记g")]),t._v(" "),l("li",[t._v("如果参数2仅为字符串则可使用特殊字符序列\n"),l("ul",[l("li",[t._v("$$==$")]),t._v(" "),l("li",[t._v("$&==匹配整个模式的子字符串")]),t._v(" "),l("li",[t._v("$'==匹配的自字符串之前的子字符串")]),t._v(" "),l("li",[t._v("$`==匹配的子字符串之后的子字符串")]),t._v(" "),l("li",[t._v("$n==匹配第n个捕获的子字符串 n=0~9")]),t._v(" "),l("li",[t._v("$nn==匹配第nn个捕获的子字符串 n=01~99")])])])])])])])]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("\t\t\t\t\tvar str='i love you';\n\t\t\t\t\tconsole.log(str.replace('i','liuyang'));\n")])])]),l("ul",[l("li",[t._v("split\n"),l("ul",[l("li",[t._v("功能:根据指定的分割符将字符串分割成多个子串，并返回成数组")]),t._v(" "),l("li",[t._v("参数\n"),l("ul",[l("li",[t._v("必须:指定的分隔符")]),t._v(" "),l("li",[t._v("可选：指定数组的长度")])])])])])]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v('\t\t\t\tvar str = "The rain in SPAIN stays mainly in the plain";\n\t\t\t\tconsole.log(str.split(" "));["The", "rain", "in", "SPAIN", "stays", "mainly", "in", "the", "plain"]\n')])])]),l("h1",{attrs:{id:"操作方法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#操作方法"}},[t._v("#")]),t._v(" 操作方法")]),t._v(" "),l("h2",{attrs:{id:"拼接方法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#拼接方法"}},[t._v("#")]),t._v(" 拼接方法")]),t._v(" "),l("ul",[l("li",[t._v("concat\n"),l("ul",[l("li",[t._v("语法:string.concat(value,....)")]),t._v(" "),l("li",[t._v("功能:链接字符串")]),t._v(" "),l("li",[t._v("参数:要链接到string上的一个或多个值")]),t._v(" "),l("li",[t._v("返回值:把所有参数都连接到字符串string上得到的新字符串")]),t._v(" "),l("li",[t._v('特性：功能与"+"相同原始字符串的实际值并未正真被修改')])])])]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v('\t\t\t   var str1="i";\n\t\t\t   var str2=" love ";\n\t\t\t   var str3="you";\n\t\t\t   console.log(str1.concat(str2,str3));//i love you\n')])])]),l("h2",{attrs:{id:"截取方法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#截取方法"}},[t._v("#")]),t._v(" 截取方法")]),t._v(" "),l("h3",{attrs:{id:"根据下标截取子串"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#根据下标截取子串"}},[t._v("#")]),t._v(" 根据下标截取子串")]),t._v(" "),l("ul",[l("li",[t._v("slice()\n"),l("ul",[l("li",[t._v("参数1：必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。")]),t._v(" "),l("li",[t._v("参数2：可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。")])])])]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v('\t\t\t var str="abcdefghijk";\n\t\t\t console.log(str.slice(-7,-5))//4 6  ef\n\t\t\t console.log(str);//abcdefghijk\n')])])]),l("ul",[l("li",[t._v("substring()\n"),l("ul",[l("li",[t._v("from:\t必需。一个非负的整数，规定要提取的子串的第一个字符在 string Object 中的位置。")]),t._v(" "),l("li",[t._v("to:\t可选。一个非负的整数，比要提取的子串的最后一个字符在 string Object 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。")])])])]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v('\t\t\tvar str="Hello world!";\n\t\t\tdocument.write(str.substring(3)+"<br>");//lo world!\n\t\t\tdocument.write(str.substring(3,7));//lo w\n')])])]),l("h3",{attrs:{id:"根据长度截取子串"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#根据长度截取子串"}},[t._v("#")]),t._v(" 根据长度截取子串")]),t._v(" "),l("ul",[l("li",[t._v("substr()\n"),l("ul",[l("li",[t._v("start:\t必需。要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。")]),t._v(" "),l("li",[t._v("length:可选。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 stringObject 的开始位置到结尾的字串。")])])])]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v('\t\t\tvar str="abcdefghijk";\n\t\t\tconsole.log();\n\t\t\tconsole.log(str.substr(2,3));//cde\n\t\t\tconsole.log(str.substr(-20,5));//cdefghijk  从0开始\n\t\t\tconsole.log(str.substr(-2,5));//jk\n\t\t\tconsole.log(str.substr(2,20));//cdefghijk\n')])])]),l("h2",{attrs:{id:"空格处理"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#空格处理"}},[t._v("#")]),t._v(" 空格处理")]),t._v(" "),l("ul",[l("li",[t._v("trim 清除前置及后置空格")]),t._v(" "),l("li",[t._v("trimLeft:清除前置空格")]),t._v(" "),l("li",[t._v("trimRight：清除后置空格")])]),t._v(" "),l("h2",{attrs:{id:"比较方法-localecompare"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#比较方法-localecompare"}},[t._v("#")]),t._v(" 比较方法：localeCompare()")]),t._v(" "),l("ul",[l("li",[t._v("localeCompare()\n"),l("ul",[l("li",[t._v("功能:用本地特定顺序比较两个字符串")]),t._v(" "),l("li",[t._v("参数:与原字符串进行比较的字符串")]),t._v(" "),l("li",[t._v("返回值:说明比较的数字\n"),l("ul",[l("li",[t._v("负数:原字符串<参数字符串")]),t._v(" "),l("li",[t._v("0：原字符串=参数字符串")]),t._v(" "),l("li",[t._v("正数:原字符串>参数字符串")])])])])])]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v('\t\t\t\tvar str="北京";\n\t\t\t\tvar var2="北京";\n\t\t\t\tvar res=str.localeCompare(var2);\n\t\t\t\tconsole.log(res); //0\n')])])]),l("h1",{attrs:{id:"编码方法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#编码方法"}},[t._v("#")]),t._v(" 编码方法")]),t._v(" "),l("h1",{attrs:{id:"字符串常规编码与解码"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#字符串常规编码与解码"}},[t._v("#")]),t._v(" #字符串常规编码与解码")]),t._v(" "),l("ul",[l("li",[t._v("escape()")]),t._v(" "),l("li",[t._v("unescape()")])]),t._v(" "),l("h2",{attrs:{id:"uri字符串编码与解码"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#uri字符串编码与解码"}},[t._v("#")]),t._v(" URI字符串编码与解码")]),t._v(" "),l("ul",[l("li",[t._v("encodeURI()")]),t._v(" "),l("li",[t._v("decodeURI()")])]),t._v(" "),l("h2",{attrs:{id:"uri组件编码与解码"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#uri组件编码与解码"}},[t._v("#")]),t._v(" URI组件编码与解码")]),t._v(" "),l("ul",[l("li",[t._v("encodeURIComponent()")]),t._v(" "),l("li",[t._v("decodeURIComponent()")])]),t._v(" "),l("h1",{attrs:{id:"转换方式"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#转换方式"}},[t._v("#")]),t._v(" 转换方式")]),t._v(" "),l("h2",{attrs:{id:"大小写转换"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#大小写转换"}},[t._v("#")]),t._v(" 大小写转换")]),t._v(" "),l("h3",{attrs:{id:"转换为大写"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#转换为大写"}},[t._v("#")]),t._v(" 转换为大写")]),t._v(" "),l("ul",[l("li",[t._v("toUpperCase();")]),t._v(" "),l("li",[t._v("toLocaleUpperCase()  本地")])]),t._v(" "),l("h3",{attrs:{id:"转换为小写"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#转换为小写"}},[t._v("#")]),t._v(" 转换为小写")]),t._v(" "),l("ul",[l("li",[t._v("toLowerCase();")]),t._v(" "),l("li",[t._v("toLocaleLowerCase()本地")])]),t._v(" "),l("h3",{attrs:{id:"代码转换"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#代码转换"}},[t._v("#")]),t._v(" 代码转换")]),t._v(" "),l("ul",[l("li",[t._v("用js动态格式化html,但不具有语义性 ，舍弃")])])])}),[],!1,null,null,null);a.default=v.exports}}]);