(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{634:function(t,n,e){"use strict";e.r(n);var s=e(6),r=Object(s.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("blockquote",[e("p",[t._v("有时候我们需要修改子元素，我们必须通过父元素的传递 props 来重新渲染，reac 提供了方便修改子元素的方法，那就是采用 refs 属性进行操作 dom，但是我们不要随便操作 dom")])]),t._v(" "),e("h2",{attrs:{id:"什么时候使用-refs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么时候使用-refs"}},[t._v("#")]),t._v(" 什么时候使用 refs")]),t._v(" "),e("blockquote",[e("p",[t._v("管理焦点，文本，媒体播放")])]),t._v(" "),e("blockquote",[e("p",[t._v("需要触发的命令动画")])]),t._v(" "),e("blockquote",[e("p",[t._v("继承的第三方 dom 库")])]),t._v(" "),e("h1",{attrs:{id:"举一个例子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#举一个例子"}},[t._v("#")]),t._v(" 举一个例子")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// ref\n\nclass CustomTextInput extends Component {\n    constructor(props){\n        super(props)\n        this.focus = this.focus.bind(this);\n    }\n\n    focus(){\n        this.textInput.focus();\n    }\n\n    render(){\n        return (<div>\n            <input type="text"\n                    ref={(input) => {this.textInput = input}}\n            />\n        </div>)\n    }\n\n}\n')])])]),e("blockquote",[e("p",[t._v("我们必须在 class 定义的组件使用 ref，是 function 将不起作用的，那是因为他们不存在实例，但是我们可以在 function 中具体的 html 元素或者类组件使用 ref")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('function CustomTextInput(props) {\n  // textInput must be declared here so the ref callback can refer to it\n  let textInput = null;\n\n  function handleClick() {\n    textInput.focus();\n  }\n\n  return (\n    <div>\n      <input\n        type="text"\n        ref={(input) => { textInput = input; }} />\n      <input\n        type="button"\n        value="Focus the text input"\n        onClick={handleClick}\n      />\n    </div>\n  );\n}\n')])])]),e("h1",{attrs:{id:"暴露-refs-给父组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#暴露-refs-给父组件"}},[t._v("#")]),t._v(" 暴露 refs 给父组件")]),t._v(" "),e("blockquote",[e("p",[t._v("在一些情况下，我们想访问父组件下的子组件，但是通常是不允许的，这会破坏组件的封装性，但是我们可以传一个特殊的属性给子元素，从而操作子元素的 dom")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function CustomTextInput(props) {\n    console.log(props.inputRef);\n    return (\n        <div>\n            <input ref={props.inputRef} />\n        </div>\n    );\n}\n\nclass Parent extends React.Component {\n\n\n    render() {\n        // console.log(this.inpsstElement);\n        return (\n            <CustomTextInput\n                inputRef={el => this.inputElement  =el}\n            />\n        );\n    }\n}\n")])])]),e("blockquote",[e("p",[t._v("以上的方式既适合 class 组件也是 function 组件")])])])}),[],!1,null,null,null);n.default=r.exports}}]);