(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{632:function(e,n,t){"use strict";t.r(n);var s=t(6),r=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("blockquote",[t("p",[e._v("react-Lists and Keys")])]),e._v(" "),t("h1",{attrs:{id:"rendering-multiple-components-如何重复渲染多个组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rendering-multiple-components-如何重复渲染多个组件"}},[e._v("#")]),e._v(" Rendering Multiple Components 如何重复渲染多个组件")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//生成无序列表\n\nfunction NumberList(props) {\n        const numbers = props.numbers;\n        const listItems = numbers.map((number) => <li>{number}</li>)\n         return (\n             <ul>\n                 {listItems}\n             </ul>\n         )\n}\n")])])]),t("blockquote",[t("p",[e._v('在做循环渲染的时候，控制台会报出 an array or iterator should have a unique "key" prop，我们必须添加一个 key')])]),e._v(" "),t("blockquote",[t("p",[e._v("const listItems = numbers.map((number) => <li "),t("strong",[e._v("key={number.toString()")]),e._v("}>{number}"),e._v(")")])]),e._v(" "),t("blockquote",[t("p",[e._v("Keys help React identify which items have changed, are added, or are removed")])]),e._v(" "),t("blockquote",[t("p",[e._v("不推荐使用一下方式，因为列表一旦重新，它的效率非常慢")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const todoItems = todos.map((todo, index) =>\n  // Only do this if items have no stable IDs\n  <li key={index}>\n    {todo.text}\n  </li>\n);\n")])])]),t("blockquote",[t("p",[e._v("当 li 为根元素时，我们只能把 key 加到组件上")])]),e._v(" "),t("blockquote",[t("p",[e._v("Example: Incorrect Key Usage")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function ListItem(props) {\n  const value = props.value;\n  return (\n    // Wrong! There is no need to specify the key here:\n    <li key={value.toString()}>\n      {value}\n    </li>\n  );\n}\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    // Wrong! The key should have been specified here:\n    <ListItem value={number} />\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n")])])]),t("blockquote",[t("p",[e._v("Example: Correct Key Usage")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function ListItem(props) {\n  // Correct! There is no need to specify the key here:\n  return <li>{props.value}</li>;\n}\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    // Correct! Key should be specified inside the array.\n    <ListItem key={number.toString()}\n              value={number} />\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n")])])]),t("blockquote",[t("p",[e._v("对于 key 值，只有在不同的数组上才能重复使用")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//重复使用Key\nclass Blog extends Component {\n    constructor(props){\n        super(props)\n    this.sidebar =(<ul>{props.posts.map((post) => <li key={post.id}>{post.title}</li>)}</ul>);\n    this.content = props.posts.map((post) => <div key={post.id}><h3>{post.title}</h3>;<p>{post.content}</p> </div>);\n\n    }\n\n    render (){\n         return (<div>\n             {this.sidebar}\n             <hr/>\n             {this.content}\n         </div>)\n    }\n}\n\nconst posts = [\n    {id: 1, title: 'Hello World', content: 'Welcome to learning React!'},\n    {id: 2, title: 'Installation', content: 'You can install React from npm.'}\n];\n")])])]),t("h1",{attrs:{id:"embedding-map-in-jsx-map-的两种用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#embedding-map-in-jsx-map-的两种用法"}},[e._v("#")]),e._v(" Embedding map() in JSX map 的两种用法")]),e._v(" "),t("blockquote",[t("p",[e._v("第一种")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <ListItem key={number.toString()}\n              value={number} />\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n")])])]),t("blockquote",[t("p",[e._v("第二种")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function NumberList(props) {\n  const numbers = props.numbers;\n  return (\n    <ul>\n      {numbers.map((number) =>\n        <ListItem key={number.toString()}\n                  value={number} />\n      )}\n    </ul>\n  );\n}\n")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);