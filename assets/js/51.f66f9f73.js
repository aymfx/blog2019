(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{564:function(t,e,n){"use strict";n.r(e);var a=n(6),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h3",{attrs:{id:"数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),n("blockquote",[n("p",[t._v("es6加入了一些数组的新功能，以及改进了旧功能")])]),t._v(" "),n("h4",{attrs:{id:"保证永远传的是数组的元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#保证永远传的是数组的元素"}},[t._v("#")]),t._v(" 保证永远传的是数组的元素")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let items = Array.of(20);\nconsole.log(items.length) //1\nconsole.log(items[0]) //20\n\nitmes = Array.of(2);\n\nconsole.log(itmes.length);//1\nconsole.log(itmes[0]); //2\n\n\nitmes = Array.of('2');\n\nconsole.log(itmes.length); //1\nconsole.log(itmes[0]); //'2'\n\n")])])]),n("h4",{attrs:{id:"将类对象转换成数组的方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#将类对象转换成数组的方式"}},[t._v("#")]),t._v(" 将类对象转换成数组的方式")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function translate(){\n    return Array.from(arguments)\n}\n\nlet number = translate(1,3,4,5);\nconsole.log(number); //[ 1, 3, 4, 5 ]\n")])])]),n("blockquote",[n("p",[t._v("映射转换(第二个参数的转换)")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function translate(){\n    return Array.from(arguments,(value) => value+1)\n}\n\nlet number = translate(1,3,4,5);\nconsole.log(number); //[ 2, 4, 5, 6 ]\n")])])]),n("blockquote",[n("p",[t._v("第三个值是this")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let helper = {\n    diff:1,\n    add(value){\n        return value+this.diff;\n    }\n}\n\nfunction translate(){\n    return Array.from(arguments,helper.add,helper)\n}\n\nlet number = translate(1,3,4,5);\nconsole.log(number); // [ 2, 4, 5, 6 ]\n")])])]),n("blockquote",[n("p",[t._v("Array.from可以用来转换可迭代对象")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let number = {\n    *[Symbol.iterator](){\n        yield 1;\n        yield 2;\n        yield 3;\n        yield 4;\n    }\n}\n\nlet number2 = Array.from(number,(value) => value+1);\n\nconsole.log(number2); //[ 2, 3, 4, 5 ]\n")])])]),n("h4",{attrs:{id:"新增方法find-方法和findindex-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#新增方法find-方法和findindex-方法"}},[t._v("#")]),t._v(" 新增方法find()方法和findIndex()方法")]),t._v(" "),n("blockquote",[n("p",[t._v("两个方法的一个函数接受一个回调函数，以及一个this作为参数")])]),t._v(" "),n("blockquote",[n("p",[t._v("find返回的是return为true的值")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let numbers = [1,34,4,44,33,56];\nconsole.log(numbers.find((item,index,arr) => {\n    if(item>33){\n        console.log(item,index,arr);  //34 1 [ 1, 34, 4, 44, 33, 56 ]\n        return item\n    }\n})) //34\n\n")])])]),n("blockquote",[n("p",[t._v("findIndex()返回的是满足true的值的位置(第一个)")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let numbers = [1,34,4,44,33,56];\nconsole.log(numbers.findIndex((item,index,arr) => {\n    if(item>33){\n        console.log(item,index,arr);  //34 1 [ 1, 34, 4, 44, 33, 56 ]\n        return item\n    }\n})) //1\n")])])]),n("h3",{attrs:{id:"fill-方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#fill-方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素"}},[t._v("#")]),t._v(" fill() 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素")]),t._v(" "),n("blockquote",[n("p",[t._v("接受三个参数一个是要填充的值，一个是填充的起始位置，一个是结结束位置")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let numbers = [1,34,4,44,33,56];\nconsole.log(numbers.fill(1)) //[ 1, 1, 1, 1, 1, 1 ]\nconsole.log(numbers) //[ 1, 1, 1, 1, 1, 1 ]  //改变原数组\n\nlet nums  = [2,3,4,5,2,4,3]\n\nconsole.log(nums.fill(1,2)) //[ 2, 3, 1, 1, 1, 1, 1 ]\n\nconsole.log(nums.fill(6,2,5)); //[ 2, 3, 6, 6, 6, 1, 1 ]  //作闭右开\n\n")])])]),n("h3",{attrs:{id:"copywith方法浅复制数组的一部分到同一数组中的另一个位置-并返回它-而不修改其大小"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#copywith方法浅复制数组的一部分到同一数组中的另一个位置-并返回它-而不修改其大小"}},[t._v("#")]),t._v(" copyWith方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，而不修改其大小")]),t._v(" "),n("blockquote",[n("p",[t._v("该方法接受3个值，一个是开始填充的位置，一个是开始复制的位置位置,改变原数组,一个是复制结束的位置")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let numbers = [1,34,4,44,33,56];\nconsole.log(numbers.copyWithin(2,3)); //[ 1, 34, 44, 33, 56, 56 ]\nconsole.log(numbers.copyWithin(2,0,1)); //[ 1, 34, 1, 33, 56, 56 ]\n")])])]),n("h3",{attrs:{id:"定型数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定型数组"}},[t._v("#")]),t._v(" 定型数组")]),t._v(" "),n("blockquote",[n("p",[t._v("定型数组是一种用于处理数值类型(正如其名，不是所有类型)数据的专用数组，最早是在WebGL中使用的，WebGL是OpenGL ES 2.0的移植版，在Web 页面中通过 canvas标签 元素来呈现它。定型数组也被一同移植而来，其可为JS提供快速的按位运算")])]),t._v(" "),n("blockquote",[n("p",[t._v("在JS中，数字是以64位浮点格式存储的，并按需转换为32位整数，所以算术运算非常慢，无法满足WebGL的需求。因此在ES6中引入定型数组来解决这个问题，并提供更高性能的算术运算。所谓定型数组，就是将任何数字转换为一个包含数字比特的数组，随后就可以通过我们熟悉的JS数组方法来进一步处理")])]),t._v(" "),n("h4",{attrs:{id:"数组缓冲区"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组缓冲区"}},[t._v("#")]),t._v(" 数组缓冲区")]),t._v(" "),n("blockquote",[n("p",[t._v("ArrayBuffer 对象用来表示通用的、固定长度的原始二进制数据缓冲区。ArrayBuffer 不能直接操作，而是要通过类型数组对象或 DataView 对象来操作，它们会将缓冲区中的数据表示为特定的格式，并通过这些格式来读写缓冲区的内容。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let buffer = new ArrayBuffer(10);\nconsole.log(buffer.byteLength); //10\n\n//也可以使用数组的方法（类似）\nlet buffer2 = buffer.slice(1,3);\n\nconsole.log(buffer2.byteLength) //2\n\n")])])]),n("blockquote",[n("p",[t._v("不能修改缓存区的大小，只能修改数据缓冲区内的数据")])]),t._v(" "),n("h3",{attrs:{id:"通过视图操作数组缓冲区"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#通过视图操作数组缓冲区"}},[t._v("#")]),t._v(" 通过视图操作数组缓冲区")]),t._v(" "),n("blockquote",[n("p",[t._v("数组缓冲区是内存中的一段地址，视图是用来操作内存的接口。视图可以操作数组缓冲区或缓冲区字节的子集，并按照其中一种数值型数据类型来读取和写入数据。DataView类型是一种通用的数组缓冲区视图，其支持所有8种数值型数据类型")])]),t._v(" "),n("ul",[n("li",[t._v("有符号的8位整数(int8)")]),t._v(" "),n("li",[t._v("无符号的8位整数(uint8)")]),t._v(" "),n("li",[t._v("有符号的16位整数(int16)")]),t._v(" "),n("li",[t._v("无符号的16位整数(uint16)")]),t._v(" "),n("li",[t._v("有符号的32位整数(int32)")]),t._v(" "),n("li",[t._v("无符号的32位整数(uint32)")]),t._v(" "),n("li",[t._v("32位浮点数(float32)")]),t._v(" "),n("li",[t._v("64位浮点数(float64)")])]),t._v(" "),n("blockquote",[n("p",[t._v("可以通过以下几种只读属性来获取视图的信息")])]),t._v(" "),n("ul",[n("li",[t._v("buffer 视图绑定的数组缓冲区")]),t._v(" "),n("li",[t._v("byteOffset DataView构造函数的第二个参数，默认是0，只有传入参数时才有值")]),t._v(" "),n("li",[t._v("byteLength DataView构造函数的第三个参数，默认是缓冲区的长度byteLength")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let buffer = new ArrayBuffer(10),\n//使用DataView创建视图的实例\n    view1 = new DataView(buffer),\n    view2 = new DataView(buffer,5,2);  // 第一个参数是创建的缓冲区，第二个是操作缓冲区的起始位置，第三个参数是缓冲区的长度\n\n    console.log(view1.buffer === buffer); //true\n    console.log(view2.buffer === buffer); //true\n\n    console.log(view1.byteOffset); //0\n    console.log(view2.byteOffset); //5\n\n    \n    console.log(view1.byteLength); //10\n    console.log(view2.byteLength); //2\n")])])]),n("h3",{attrs:{id:"读取和写入数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#读取和写入数据"}},[t._v("#")]),t._v(" 读取和写入数据")]),t._v(" "),n("blockquote",[n("p",[t._v("js的8中数值型数据类型，在DataView的原型上都能找到")])]),t._v(" "),n("ul",[n("li",[t._v("读方法\nDataView.prototype.getInt8()\n从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个8-bit数(一个字节).\nDataView.prototype.getUint8()\n从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个8-bit数(无符号字节).\nDataView.prototype.getInt16()\n从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个16-bit数(短整型).\nDataView.prototype.getUint16()\n从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个16-bit数(无符号短整型).\nDataView.prototype.getInt32()\n从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个32-bit数(长整型).\nDataView.prototype.getUint32()\n从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个32-bit数(无符号长整型).\nDataView.prototype.getFloat32()\n从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个32-bit数(浮点型).\nDataView.prototype.getFloat64()\n从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个64-bit数(双精度浮点型).")]),t._v(" "),n("li",[t._v("写方法\nDataView.prototype.setInt8()\n从DataView起始位置以byte为计数的指定偏移量(byteOffset)处储存一个8-bit数(一个字节).\nDataView.prototype.setUint8()\n从DataView起始位置以byte为计数的指定偏移量(byteOffset)处储存一个8-bit数(无符号字节).\nDataView.prototype.setInt16()\n从DataView起始位置以byte为计数的指定偏移量(byteOffset)处储存一个16-bit数(短整型).\nDataView.prototype.setUint16()\n从DataView起始位置以byte为计数的指定偏移量(byteOffset)处储存一个16-bit数(无符号短整型).\nDataView.prototype.setInt32()\n从DataView起始位置以byte为计数的指定偏移量(byteOffset)处储存一个32-bit数(长整型).\nDataView.prototype.setUint32()\n从DataView起始位置以byte为计数的指定偏移量(byteOffset)处储存一个32-bit数(无符号长整型).\nDataView.prototype.setFloat32()\n从DataView起始位置以byte为计数的指定偏移量(byteOffset)处储存一个32-bit数(浮点型).\nDataView.prototype.setFloat64()\n从DataView起始位置以byte为计数的指定偏移量(byteOffset)处储存一个64-bit数(双精度浮点型).")]),t._v(" "),n("li",[t._v("用法")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let buffer = new ArrayBuffer(10),\n    //使用DataView创建视图的实例\n    view = new DataView(buffer);\n\n    view.setInt8(0,5);\n    view.setInt8(1,-1);\n\n    console.log(view.getInt8(0)); //5\n    console.log(view.getInt8(1)); //-1\n\n    //也可以用getInt16的字节调用，这样使用的话，两个8比特的字符就会合并成一个16bit字符,于是得到的值就是这个了\n    console.log(view.getInt16()) //1535\n")])])]),n("h3",{attrs:{id:"定型数组-特殊的视图类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定型数组-特殊的视图类型"}},[t._v("#")]),t._v(" 定型数组—特殊的视图类型")]),t._v(" "),n("blockquote",[n("p",[t._v("上面的缓冲区类型视图是可以随意更变的，但是我们只希望处理一种数据类型，这让我们很容易选择和判断")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let buffer = new ArrayBuffer(10),\n//使用DataView创建视图的实例\n    view1 = new Int8Array(buffer),\n    view2 = new Int8Array(buffer,5,2);  // 第一个参数是创建的缓冲区，第二个是操作缓冲区的起始位置，第三个参数是缓冲区的长度\n\n    console.log(view1.buffer === buffer); //true\n    console.log(view2.buffer === buffer); //true\n\n    console.log(view1.byteOffset); //0\n    console.log(view2.byteOffset); //5\n\n    \n    console.log(view1.byteLength); //10\n    console.log(view2.byteLength); //2\n")])])]),n("blockquote",[n("p",[t._v("不用数组缓冲区创建数组，利用定型数组的创建")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let ints = new Int16Array(2),\n    floats = new Float32Array(5);\n\n    console.log(ints.byteLength); //4\n    console.log(ints.length); //2\n\n    console.log(floats.byteLength); //20\n    console.log(floats.length); //5\n\n")])])]),n("blockquote",[n("p",[t._v("不给定型参数传值，则不能使用缓存区，因为它的容量默认为0")])]),t._v(" "),n("h3",{attrs:{id:"第三种创建定型数组的方法是调用构造函数时-将以下任一对象作为唯一的参数传入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第三种创建定型数组的方法是调用构造函数时-将以下任一对象作为唯一的参数传入"}},[t._v("#")]),t._v(" 第三种创建定型数组的方法是调用构造函数时，将以下任一对象作为唯一的参数传入")]),t._v(" "),n("p",[t._v("1、一个定型数组")]),t._v(" "),n("p",[t._v(">该数组中的每个元素会作为新的元素被复制到新的定型数组中。例如，如果将一个int8数组传入到Int16Array构造函数中，int8的值会被复制到一个新的int16数组中，新的定型数组使用新的数组缓冲区")]),t._v(" "),n("p",[t._v("2、一个可迭代对象")]),t._v(" "),n("p",[t._v("> 对象的迭代器会被调用，通过检索所有条目来选取插入到定型数组的元素，如果所有元素都是不适用于该视图类型的无效类型，构造函数将会抛出一个错误")]),t._v(" "),n("p",[t._v("3、一个数组")]),t._v(" "),n("p",[t._v("> 数组中的元素会被复制到一个新的定型数组中，如果所有元素都是不适用于该视图类型的无效类型，构造函数将会抛出一个错误")]),t._v(" "),n("p",[t._v("4、一个类数组对象")]),t._v(" "),n("p",[t._v("> 与传入数组的行为一致")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("    ```\n            let int1 = new Int16Array([15,25]),\n    int2 = new Int32Array(int1);\n\nconsole.log(int1.buffer === int2.buffer); //4\nconsole.log(int1.byteLength);   //15\nconsole.log(int1[0])    //25\nconsole.log(int1[1])    //8\nconsole.log(int2.byteLength)    //2\nconsole.log(int2.length)    //15\n\nconsole.log(int2[0]);   //15\nconsole.log(int2[1]);   //25\n    ```\n")])])]),n("h4",{attrs:{id:"元素大小"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#元素大小"}},[t._v("#")]),t._v(" 元素大小")]),t._v(" "),n("blockquote",[n("p",[t._v("每种定型数组由多个元素组成，元素大小,元素大小指的每个元素表示的字节数，该值存储在每个构造函数和每个实例的BYTES_PRE_ELEMENT属性")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("console.log(UInt8Array.BYTES_PRE_ELEMENT);\nconsole.log(UInt16Array.BYTES_PRE_ELEMENT);\n\nlet ints = new Int8Array(5);\nconsole.log(ints.BYTES_PER_ELEMENT);\n    \n")])])]),n("blockquote",[n("p",[t._v("定型数组也适用于数组的通用方法，但也有区别")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("//原型不同\nlet ints = new Int16Array([20,50]);\nconsole.log(ints instanceof Array); //false\nconsole.log(Array.isArray(ints));  //false\n//行为差异，数组的元素尺寸大小一致,且不能被扩展\nlet ints = new Int16Array([25,50]);\nconsole.log(ints.length); //2\nconsole.log(ints[0]); //25\nconsole.log(ints[1]); //50\n\nints[2] = 5; \n\nconsole.log(ints.length); //2\nconsole.log(ints[0]); //25\n//0被用于代替所有非法值\nlet ints = new Int16Array(['hi']);\nconsole.log(ints.length); //1\nconsole.log(ints[0]);   //0\n")])])]),n("h3",{attrs:{id:"缺失的方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缺失的方法"}},[t._v("#")]),t._v(" 缺失的方法")]),t._v(" "),n("ul",[n("li",[t._v("concat()")]),t._v(" "),n("li",[t._v("shift()")]),t._v(" "),n("li",[t._v("pop()")]),t._v(" "),n("li",[t._v("splice()")]),t._v(" "),n("li",[t._v("push()")]),t._v(" "),n("li",[t._v("unshift()")])]),t._v(" "),n("h3",{attrs:{id:"附加方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#附加方法"}},[t._v("#")]),t._v(" 附加方法")]),t._v(" "),n("ul",[n("li",[t._v("set():将其他数组复制到已有的定型数组")]),t._v(" "),n("li",[t._v("subarray():提取已有定型数组的一部分作为新的定型数组")])]),t._v(" "),n("h4",{attrs:{id:"set-一个是数组-定型数组或普通数组-一个是可选的偏移量-表示开始插入数据的位置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#set-一个是数组-定型数组或普通数组-一个是可选的偏移量-表示开始插入数据的位置"}},[t._v("#")]),t._v(" set() 一个是数组(定型数组或普通数组),一个是可选的偏移量，表示开始插入数据的位置，")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let ints = new Int16Array(4);\nints.set([25,50]);\nints.set([125,50],1);\nconsole.log(ints.toString()); //25,50,75,0\n")])])]),n("h4",{attrs:{id:"subarray-一个是可选的开始位置-一个是可选的结束"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subarray-一个是可选的开始位置-一个是可选的结束"}},[t._v("#")]),t._v(" subArray()一个是可选的开始位置,一个是可选的结束")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let ints = new Int16Array([25,50,75,100]),\n    subint1 = ints.subarray(), \n    subint2 = ints.subarray(2), \n    subint3 = ints.subarray(1,3);\n\n    console.log(subint1.toString());//25,50,75,100\n    console.log(subint2.toString());//75,100\n    console.log(subint3.toString());//75,100\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);