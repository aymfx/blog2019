(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{626:function(n,t,e){"use strict";e.r(t);var a=e(6),r=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("blockquote",[e("p",[n._v("react 推荐使用组合，组合可以提高重复利用性，减少模块间的耦合")])]),n._v(" "),e("h1",{attrs:{id:"组合-vs-继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组合-vs-继承"}},[n._v("#")]),n._v(" 组合 vs 继承")]),n._v(" "),e("blockquote",[e("p",[n._v("react 推荐使用组合，组合可以提高重复利用性，减少模块间的耦合")])]),n._v(" "),e("h1",{attrs:{id:"包含"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#包含"}},[n._v("#")]),n._v(" 包含")]),n._v(" "),e("blockquote",[e("p",[n._v("react 组件不知道有没有子元素，对那些像盒子一样的公共组件，它通过一个特殊的 children 属性来添加子组件输出")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//包含\n\nfunction FancyBorder(props) {\n     return (\n         <div>\n                <p>{props.color}</p>\n                {props.children}\n         </div>\n     )\n}\n\nfunction WelcomeDialog() {\n    return (<FancyBorder color="blue">\n            <h1>我是标题啊</h1>\n            <p>我是内容啊</p>\n    </FancyBorder>)\n}\n')])])]),e("blockquote",[e("p",[n._v("在 FancyBorder 组件里面的内容将被传递给它的 props.children 属性，按原样输出")])]),n._v(" "),e("h1",{attrs:{id:"我们可以自定义自己传入的子组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#我们可以自定义自己传入的子组件"}},[n._v("#")]),n._v(" 我们可以自定义自己传入的子组件")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function Contacts() {\n     return (<div>我是Contacts</div>)\n}\n\nfunction Chat() {\n    return (<div>我是Chat</div>)\n}\n\nfunction SplitPane(props) {\n    return (\n        <div>\n            <p>显示啊</p>\n            <div>\n                {props.left}\n            </div>\n            <div>\n                {props.right}\n            </div>\n        </div>\n    )\n}\n\nfunction Just() {\n        return (<SplitPane left={<Contacts/>} right={<Chat/>}/>)\n}\n")])])]),e("h1",{attrs:{id:"被定义为类的组件在组合方面同样优秀"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#被定义为类的组件在组合方面同样优秀"}},[n._v("#")]),n._v(" 被定义为类的组件在组合方面同样优秀")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//类的组合\n\nfunction FancyBorder(props) {\n    return (\n        <div style={{background:"#f99"}}>\n            <p>{props.color}Dialog</p>\n             <p>\n                 {props.children}\n             </p>\n        </div>\n    )\n}\n\n\n\nfunction Dialog(props) {\n    return (\n        <FancyBorder color="blue">\n            <h2>我是Dialog</h2>\n            <h1 className="Dialog-title">\n                {props.title}\n            </h1>\n            <p className="Dialog-message">\n                {props.message}\n            </p>\n            {props.children}\n        </FancyBorder>\n    )\n}\n\nclass SignUpDailog extends Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSignUp= this.handleSignUp.bind(this);\n        this.state = {login:\'\'}\n    }\n\n    render(){\n        return (<Dialog title="我是真标题" message="我是假信息">\n            <input type="text" value={this.state.login} onChange={this.handleChange}/>\n            <button onClick={this.handleSignUp}>点我</button>\n        </Dialog>)\n    }\n\n    handleChange(e){\n        this.setState({login:e.target.value})\n    }\n\n    handleSignUp(){\n        alert(`hahah ,${this.state.login}`)\n    }\n\n}\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);